let fetch,GRAPHQL_STAGING_URL,ROSIE_URL,API_TOKEN_HEADER,USER_AGENT_CLI,USER_AGENT_HEADER,request,getToken,printError;_ec1‍.x([["codigaApiFetch",()=>codigaApiFetch],["rosieApiFetch",()=>rosieApiFetch]]);_ec1‍.w("node-fetch",[["default",["fetch"],function(v){fetch=v}]]);_ec1‍.w("./constants",[["GRAPHQL_STAGING_URL",["GRAPHQL_STAGING_URL"],function(v){GRAPHQL_STAGING_URL=v}],["ROSIE_URL",["ROSIE_URL"],function(v){ROSIE_URL=v}],["API_TOKEN_HEADER",["API_TOKEN_HEADER"],function(v){API_TOKEN_HEADER=v}],["USER_AGENT_CLI",["USER_AGENT_CLI"],function(v){USER_AGENT_CLI=v}],["USER_AGENT_HEADER",["USER_AGENT_HEADER"],function(v){USER_AGENT_HEADER=v}]]);_ec1‍.w("graphql-request",[["request",["request"],function(v){request=v}]]);_ec1‍.w("./store",[["getToken",["getToken"],function(v){getToken=v}]]);_ec1‍.w("./print",[["printError",["printError"],function(v){printError=v}]]);












/**
 * Run a query against the Codiga Graphql API
 * @param {string} query - gql document query
 * @param {object?} variables - variables needed to run the query
 * @param {string?} apiToken - a user's apiToken
 * @returns the result of the query or an error
 */
       async function codigaApiFetch(query, variables = null, apiToken = null) {
  // create the request headers
  const requestHeaders = {
    [API_TOKEN_HEADER]: apiToken || getToken(),
    [USER_AGENT_HEADER]: USER_AGENT_CLI,
  };
  // run the request against the Codiga API
  return await request({
    url: GRAPHQL_STAGING_URL,
    document: query,
    variables,
    requestHeaders,
  });
}

/**
 * Run a fetch to the Rosie API
 * @param {object} body an unserialized object
 */
       async function rosieApiFetch(body) {
  try {
    const resp = await fetch(ROSIE_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    });
    const data = await resp.json();
    if (!data || !data.ruleResponses) {
      return [];
    }
    return data.ruleResponses;
  } catch (err) {
    // console.debug(err);
    return [];
  }
}
