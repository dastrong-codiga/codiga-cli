let fs,YAML,extname,ROSIE_SUPPORTED_SUFFIX_TO_LANGUAGE,printError;_0b7‍.x([["readFile",()=>readFile],["parseYamlFile",()=>parseYamlFile],["getLanguageForFile",()=>getLanguageForFile]]);_0b7‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_0b7‍.w("yaml",[["default",["YAML"],function(v){YAML=v}]]);_0b7‍.w("path",[["extname",["extname"],function(v){extname=v}]]);_0b7‍.w("./constants",[["ROSIE_SUPPORTED_SUFFIX_TO_LANGUAGE",["ROSIE_SUPPORTED_SUFFIX_TO_LANGUAGE"],function(v){ROSIE_SUPPORTED_SUFFIX_TO_LANGUAGE=v}]]);_0b7‍.w("./print",[["printError",["printError"],function(v){printError=v}]]);





/**
 * read a file contents
 * @param {string} path
 * @returns
 */
       function readFile(path) {
  try {
    const file = fs.readFileSync(path, "utf8");
    return file;
  } catch (err) {
    printError(`unable to read file: ${path}`, "004");
    process.exit(1);
  }
}

/**
 * Get the content of a YAML file
 * @param {string} content
 * @param {string} path (optional)
 */
       function parseYamlFile(content, path) {
  try {
    const parsedFile = YAML.parse(content);
    return parsedFile;
  } catch (err) {
    printError(`unable to parse YAML file${path ? `: ${path}` : ""}`, "005");
    process.exit(1);
  }
}

/**
 * Take a filename and converts it to Rosie supported language, if possible
 * @param {string} filename
 * @returns the language of the file, IF Rosie supports it
 */
       function getLanguageForFile(filename) {
  const extension = extname(filename);
  const language = ROSIE_SUPPORTED_SUFFIX_TO_LANGUAGE.get(extension);
  return language;
}
