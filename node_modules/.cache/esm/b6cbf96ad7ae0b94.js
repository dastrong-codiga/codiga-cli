let executeGitCommand,getRootDirectory,getRulesetsFromCodigaFile,getRulesetsWithRules,analyzeFiles,convertRulesetsToRules,printEmptyLine,printFailure,printInfo,printSubItem,printSuccess,printSuggestion,printViolation;_d7a‍.x([["checkDiff",()=>checkDiff]]);_d7a‍.w("../utils/git",[["executeGitCommand",["executeGitCommand"],function(v){executeGitCommand=v}],["getRootDirectory",["getRootDirectory"],function(v){getRootDirectory=v}]]);_d7a‍.w("../utils/rulesets",[["getRulesetsFromCodigaFile",["getRulesetsFromCodigaFile"],function(v){getRulesetsFromCodigaFile=v}],["getRulesetsWithRules",["getRulesetsWithRules"],function(v){getRulesetsWithRules=v}]]);_d7a‍.w("../utils/rosie",[["analyzeFiles",["analyzeFiles"],function(v){analyzeFiles=v}]]);_d7a‍.w("../utils/rules",[["convertRulesetsToRules",["convertRulesetsToRules"],function(v){convertRulesetsToRules=v}]]);_d7a‍.w("../utils/print",[["printEmptyLine",["printEmptyLine"],function(v){printEmptyLine=v}],["printFailure",["printFailure"],function(v){printFailure=v}],["printInfo",["printInfo"],function(v){printInfo=v}],["printSubItem",["printSubItem"],function(v){printSubItem=v}],["printSuccess",["printSuccess"],function(v){printSuccess=v}],["printSuggestion",["printSuggestion"],function(v){printSuggestion=v}],["printViolation",["printViolation"],function(v){printViolation=v}]]);
















/**
 * Gets the changed file paths between two SHAs
 * @param {string} remoteSHA
 * @param {string} localSHA
 */
function getChangedFilePaths(remoteSHA, localSHA) {
  const diff = executeGitCommand([
    "diff",
    "--name-only",
    "--diff-filter=d",
    remoteSHA,
    localSHA,
  ]);
  return diff.split("\n").filter((s) => s);
}

/**
 * Checks the diff between two SHAs and runs any Rosie rules
 * found in the codiga.yml file rulesets
 * @param {string} remoteSHA
 * @param {string} localSHA
 */
       async function checkDiff(
  remoteSHA = "ec056d88", // 2
  // remoteSHA = "8c73972c", // 1,
  localSHA = "8759b953" // 2
  // localSHA = "ec056d88" // 1
) {
  // ensure that there's a git directory to continue
  getRootDirectory();

  // get the ruleset names from the codiga.yml file
  const rulesetNames = getRulesetsFromCodigaFile();

  // get the rules for all the rulesets in the codiga file
  const rulesetsWithRules = await getRulesetsWithRules(rulesetNames);

  // get an array of all the rules from the rulesets
  const rules = convertRulesetsToRules(rulesetsWithRules);

  // get a list of all the files that have changed
  const changedFilePaths = getChangedFilePaths(remoteSHA, localSHA);

  // we analyze all the changed files and get back a list of violations and (network) errors
  const { violations, errors } = await analyzeFiles(changedFilePaths, rules);

  // print out our violations
  if (violations.length === 0) {
    printEmptyLine();
    printSuccess("Codiga found 0 violations");
    printEmptyLine();
  } else {
    printEmptyLine();
    printFailure(
      `Codiga found ${violations.length} violation${
        violations.length === 1 ? "" : "s"
      }:`
    );
    violations.forEach((violation, index) => {
      printViolation(index, violation);
    });
    printEmptyLine();
  }

  if (errors.length > 0) {
    printFailure("There were network errors while processing the following:");
    errors.forEach((error) => {
      printSubItem(`- ${error}`);
    });
    printEmptyLine();
    printSuggestion(
      "Please try again or contact our support:",
      "https://www.codiga.io/contact-us/"
    );
    printEmptyLine();
  }

  if (violations.length === 0 && errors.length === 0) {
    process.exit(0);
  } else {
    process.exit(1);
  }
}
